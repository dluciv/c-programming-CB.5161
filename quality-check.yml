cc_report: '<?xml version="1.0" encoding="UTF-8"?> <results version="2"> <cppcheck
  version="2.6"/> <errors> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/02.Types_Formatting_IO/floats.c"> <location file="examples/02.Types_Formatting_IO/floats.c"
  line="6" column="5"/> </error> <error id="knownConditionTrueFalse" severity="style"
  msg="Condition &apos;v1&apos; is always true" verbose="Condition &apos;v1&apos;
  is always true" cwe="571" file0="examples/02.Types_Formatting_IO/integers_booleans.c">
  <location file="examples/02.Types_Formatting_IO/integers_booleans.c" line="11" column="8"
  info="Condition &apos;v1&apos; is always true"/> <location file="examples/02.Types_Formatting_IO/integers_booleans.c"
  line="5" column="14" info="Assignment &apos;v1=37&apos;, assigned value is 37"/>
  </error> <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;v1&apos;
  is always true" verbose="Condition &apos;v1&apos; is always true" cwe="571" file0="examples/02.Types_Formatting_IO/integers_booleans.c">
  <location file="examples/02.Types_Formatting_IO/integers_booleans.c" line="15" column="8"
  info="Condition &apos;v1&apos; is always true"/> <location file="examples/02.Types_Formatting_IO/integers_booleans.c"
  line="5" column="14" info="Assignment &apos;v1=37&apos;, assigned value is 37"/>
  </error> <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;v2&apos;
  is always true" verbose="Condition &apos;v2&apos; is always true" cwe="571" file0="examples/02.Types_Formatting_IO/integers_booleans.c">
  <location file="examples/02.Types_Formatting_IO/integers_booleans.c" line="15" column="14"
  info="Condition &apos;v2&apos; is always true"/> <location file="examples/02.Types_Formatting_IO/integers_booleans.c"
  line="5" column="23" info="Assignment &apos;v2=43&apos;, assigned value is 43"/>
  </error> <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in
  format string (no. 1) requires &apos;unsigned long&apos; but the argument type is
  &apos;size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 1) requires
  &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/02.Types_Formatting_IO/integers_booleans.c"> <location
  file="examples/02.Types_Formatting_IO/integers_booleans.c" line="7" column="5"/>
  </error> <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in
  format string (no. 2) requires &apos;unsigned long&apos; but the argument type is
  &apos;size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 2) requires
  &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/02.Types_Formatting_IO/integers_booleans.c"> <location
  file="examples/02.Types_Formatting_IO/integers_booleans.c" line="7" column="5"/>
  </error> <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in
  format string (no. 3) requires &apos;unsigned long&apos; but the argument type is
  &apos;size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 3) requires
  &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/02.Types_Formatting_IO/integers_booleans.c"> <location
  file="examples/02.Types_Formatting_IO/integers_booleans.c" line="7" column="5"/>
  </error> <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in
  format string (no. 4) requires &apos;unsigned long&apos; but the argument type is
  &apos;size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 4) requires
  &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/02.Types_Formatting_IO/integers_booleans.c"> <location
  file="examples/02.Types_Formatting_IO/integers_booleans.c" line="7" column="5"/>
  </error> <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in
  format string (no. 5) requires &apos;unsigned long&apos; but the argument type is
  &apos;size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 5) requires
  &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/02.Types_Formatting_IO/integers_booleans.c"> <location
  file="examples/02.Types_Formatting_IO/integers_booleans.c" line="7" column="5"/>
  </error> <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format
  string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed
  int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos;
  but the argument type is &apos;signed int&apos;." cwe="686" file0="examples/02.Types_Formatting_IO/integers_booleans.c">
  <location file="examples/02.Types_Formatting_IO/integers_booleans.c" line="9" column="5"/>
  </error> <error id="unreadVariable" severity="style" msg="Variable &apos;x&apos;
  is assigned a value that is never used." verbose="Variable &apos;x&apos; is assigned
  a value that is never used." cwe="563" file0="examples/03.Macros/macro2.c"> <location
  file="examples/03.Macros/macro2.c" line="7" column="9"/> <symbol>x</symbol> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/04.Arrays_Strings/arrays1.c">
  <location file="examples/04.Arrays_Strings/arrays1.c" line="10" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/04.Arrays_Strings/arrays1.c">
  <location file="examples/04.Arrays_Strings/arrays1.c" line="10" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/04.Arrays_Strings/arrays1.c">
  <location file="examples/04.Arrays_Strings/arrays1.c" line="10" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 4) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 4) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/04.Arrays_Strings/arrays1.c">
  <location file="examples/04.Arrays_Strings/arrays1.c" line="10" column="3"/> </error>
  <error id="invalidscanf" severity="warning" msg="scanf() without field width limits
  can crash with huge input data." verbose="scanf() without field width limits can
  crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample
  program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012 char
  c[5];\012 scanf(&quot;%s&quot;, c);\012 return 0;\012}\012\012Typing in 5 or more
  characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;,
  c);&apos;, as the maximum field width does not include the terminating null byte.\012Source:
  http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c"
  cwe="119" file0="examples/04.Arrays_Strings/string_overflow.c"> <location file="examples/04.Arrays_Strings/string_overflow.c"
  line="13" column="5"/> </error> <error id="arrayIndexOutOfBounds" severity="error"
  msg="Array &apos;a[1000]&apos; accessed at index 5000, which is out of bounds."
  verbose="Array &apos;a[1000]&apos; accessed at index 5000, which is out of bounds."
  cwe="788" file0="examples/05.Pointers/pointer1.c"> <location file="examples/05.Pointers/pointer1.c"
  line="7" column="42" info="Array index out of bounds"/> </error> <error id="invalidPrintfArgType_uint"
  severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos;
  but the argument type is &apos;signed int *&apos;." verbose="%u in format string
  (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed
  int *&apos;." cwe="686" file0="examples/05.Pointers/pointer1.c"> <location file="examples/05.Pointers/pointer1.c"
  line="6" column="3"/> </error> <error id="invalidPrintfArgType_uint" severity="warning"
  msg="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument
  type is &apos;int *&apos;." verbose="%u in format string (no. 2) requires &apos;unsigned
  int&apos; but the argument type is &apos;int *&apos;." cwe="686" file0="examples/05.Pointers/pointer1.c">
  <location file="examples/05.Pointers/pointer1.c" line="6" column="3"/> </error>
  <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string
  (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;int *&apos;."
  verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument
  type is &apos;int *&apos;." cwe="686" file0="examples/05.Pointers/pointer1.c"> <location
  file="examples/05.Pointers/pointer1.c" line="7" column="3"/> </error> <error id="invalidPrintfArgType_uint"
  severity="warning" msg="%u in format string (no. 3) requires &apos;unsigned int&apos;
  but the argument type is &apos;signed int *&apos;." verbose="%u in format string
  (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed
  int *&apos;." cwe="686" file0="examples/05.Pointers/pointer1.c"> <location file="examples/05.Pointers/pointer1.c"
  line="7" column="3"/> </error> <error id="invalidPrintfArgType_uint" severity="warning"
  msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument
  type is &apos;signed int *&apos;." verbose="%u in format string (no. 1) requires
  &apos;unsigned int&apos; but the argument type is &apos;signed int *&apos;." cwe="686"
  file0="examples/05.Pointers/pointer1.c"> <location file="examples/05.Pointers/pointer1.c"
  line="8" column="3"/> </error> <error id="invalidPrintfArgType_uint" severity="warning"
  msg="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument
  type is &apos;signed int *&apos;." verbose="%u in format string (no. 2) requires
  &apos;unsigned int&apos; but the argument type is &apos;signed int *&apos;." cwe="686"
  file0="examples/05.Pointers/pointer1.c"> <location file="examples/05.Pointers/pointer1.c"
  line="8" column="3"/> </error> <error id="unknownEvaluationOrder" severity="error"
  msg="Expression &apos;&quot;%u\t%u\n&quot;,p++,p&apos; depends on order of evaluation
  of side effects" verbose="Expression &apos;&quot;%u\t%u\n&quot;,p++,p&apos; depends
  on order of evaluation of side effects" cwe="768" file0="examples/05.Pointers/pointer1.c">
  <location file="examples/05.Pointers/pointer1.c" line="8" column="25"/> </error>
  <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string
  (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;."
  verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type
  is &apos;unsigned int&apos;." cwe="686" file0="examples/06.Structs_Unions/floating_fields.c">
  <location file="examples/06.Structs_Unions/floating_fields.c" line="33" column="3"/>
  </error> <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in
  format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t
  {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos;
  but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/struct1.c">
  <location file="examples/06.Structs_Unions/struct1.c" line="21" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/struct2.c">
  <location file="examples/06.Structs_Unions/struct2.c" line="23" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/struct2.c">
  <location file="examples/06.Structs_Unions/struct2.c" line="23" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/struct3.c">
  <location file="examples/06.Structs_Unions/struct3.c" line="23" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/struct3.c">
  <location file="examples/06.Structs_Unions/struct3.c" line="23" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/variant.c">
  <location file="examples/06.Structs_Unions/variant.c" line="34" column="3"/> </error>
  <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string
  (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned
  long}&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but
  the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/06.Structs_Unions/variant.c">
  <location file="examples/06.Structs_Unions/variant.c" line="34" column="3"/> </error>
  <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos;
  can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced.
  Warning: Be careful when fixing this message, especially when there are inner loops.
  Here is an example where cppcheck will write that the scope for &apos;i&apos; can
  be reduced:\012void f(int x)\012{\012 int i = 0;\012 if (x) {\012 // it&apos;s safe
  to move &apos;int i = 0;&apos; here\012 for (int n = 0; n &lt; 10; ++n) {\012 //
  it is possible but not safe to move &apos;int i = 0;&apos; here\012 do_something(&amp;i);\012
  }\012 }\012}\012When you see this message it is always safe to reduce the variable
  scope 1 level." cwe="398" file0="examples/13.Faster_Python_C/2.CFFI/pi_approx.c">
  <location file="examples/13.Faster_Python_C/2.CFFI/pi_approx.c" line="10" column="12"/>
  <symbol>x</symbol> </error> <error id="variableScope" severity="style" msg="The
  scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable
  &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially
  when there are inner loops. Here is an example where cppcheck will write that the
  scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012 int i = 0;\012
  if (x) {\012 // it&apos;s safe to move &apos;int i = 0;&apos; here\012 for (int
  n = 0; n &lt; 10; ++n) {\012 // it is possible but not safe to move &apos;int i
  = 0;&apos; here\012 do_something(&amp;i);\012 }\012 }\012}\012When you see this
  message it is always safe to reduce the variable scope 1 level." cwe="398" file0="examples/13.Faster_Python_C/2.CFFI/pi_approx.c">
  <location file="examples/13.Faster_Python_C/2.CFFI/pi_approx.c" line="10" column="14"/>
  <symbol>y</symbol> </error> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"> <location file="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"
  line="16" column="5"/> </error> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 2)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"> <location file="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"
  line="16" column="5"/> </error> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 3)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"> <location file="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"
  line="16" column="5"/> </error> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 4) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 4)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"> <location file="examples/14.Cross_Compiling/ZX_Spectrum/hwe.c"
  line="16" column="5"/> </error> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c"> <location
  file="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c" line="37" column="5"/>
  </error> <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in
  format string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t
  {aka unsigned long}&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos;
  but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c">
  <location file="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c" line="37"
  column="5"/> </error> <error id="invalidPrintfArgType_sint" severity="portability"
  msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type
  is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 3)
  requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;."
  cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c"> <location
  file="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c" line="37" column="5"/>
  </error> <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in
  format string (no. 4) requires &apos;int&apos; but the argument type is &apos;size_t
  {aka unsigned long}&apos;." verbose="%d in format string (no. 4) requires &apos;int&apos;
  but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c">
  <location file="examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c" line="37"
  column="5"/> </error> <error id="missingIncludeSystem" severity="information" msg="Cppcheck
  cannot find all the include files (use --check-config for details)" verbose="Cppcheck
  cannot find all the include files. Cppcheck can check the code without the include
  files found. But the results will probably be more accurate if all the include files
  are found. Please check your project&apos;s include directories and add all of them
  as include directories for Cppcheck. To see what files Cppcheck cannot find use
  --check-config."/> </errors> </results>

  '
tot_score: -7.357628765792031
