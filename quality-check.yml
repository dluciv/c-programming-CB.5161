cc_messages: 41
cc_report: "examples/02.Types_Formatting_IO/integers_booleans.c:15:8: style: Condition\
  \ 'v1' is always true [knownConditionTrueFalse]\n    if(v1) {\n       ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:5:14:\
  \ note: Assignment 'v1=37', assigned value is 37\n    int v1 = 37, v2 = 43;\n  \
  \           ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:15:8: note: Condition\
  \ 'v1' is always true\n    if(v1) {\n       ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:19:8:\
  \ style: Condition 'v1' is always true [knownConditionTrueFalse]\n    if(v1 && v2)\
  \ {\n       ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:5:14: note: Assignment\
  \ 'v1=37', assigned value is 37\n    int v1 = 37, v2 = 43;\n             ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:19:8:\
  \ note: Condition 'v1' is always true\n    if(v1 && v2) {\n       ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:19:14:\
  \ style: Condition 'v2' is always true [knownConditionTrueFalse]\n    if(v1 && v2)\
  \ {\n             ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:5:23: note:\
  \ Assignment 'v2=43', assigned value is 43\n    int v1 = 37, v2 = 43;\n        \
  \              ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:19:14: note:\
  \ Condition 'v2' is always true\n    if(v1 && v2) {\n             ^\nexamples/02.Types_Formatting_IO/integers_booleans.c:13:5:\
  \ warning: %u in format string (no. 1) requires 'unsigned int' but the argument\
  \ type is 'signed int'. [invalidPrintfArgType_uint]\n    printf(\"2. %u, %d\\n\"\
  , -1, -1);\n    ^\nexamples/03.Macros/macro2.c:7:9: style: Variable 'x' is assigned\
  \ a value that is never used. [unreadVariable]\n  int x = 45;\n        ^\nexamples/04.Arrays_Strings/arrays1.5.c:10:8:\
  \ error: Invalid puts() argument nr 1. A nul-terminated string is required. [invalidFunctionArgStr]\n\
  \  puts(a0);\n       ^\nexamples/04.Arrays_Strings/arrays4.c:25:3: portability:\
  \ %d in format string (no. 1) requires 'int *' but the argument type is 'size_t\
  \ * {aka unsigned long *}'. [invalidScanfArgType_int]\n  scanf(\"%d\", &s);\n  ^\n\
  examples/04.Arrays_Strings/arrays4.c:5:23: style: Parameter 'm' can be declared\
  \ as const array [constParameter]\nvoid cache_test(float m[], size_t size)\n   \
  \                   ^\nexamples/04.Arrays_Strings/string_overflow.c:13:5: warning:\
  \ scanf() without field width limits can crash with huge input data. [invalidscanf]\n\
  \    scanf(\"%[^\\n]s\", name);\n    ^\nexamples/05.Pointers/pointer1.c:7:42: error:\
  \ Array 'a[1000]' accessed at index 5000, which is out of bounds. [arrayIndexOutOfBounds]\n\
  \  printf(\"%p\\t%p\\t%p\\n\", &a[0], a + 1, &a[5000]);\n                      \
  \                   ^\nexamples/05.Pointers/pointer1.c:11:3: warning: %d in format\
  \ string (no. 1) requires 'int' but the argument type is 'double'. [invalidPrintfArgType_sint]\n\
  \  printf(\"%d\\t%d\\t%d\\t%d\\n\", *p1, *(p1 + 1), p1[0], p1[1]);\n  ^\nexamples/05.Pointers/pointer1.c:11:3:\
  \ warning: %d in format string (no. 2) requires 'int' but the argument type is 'double'.\
  \ [invalidPrintfArgType_sint]\n  printf(\"%d\\t%d\\t%d\\t%d\\n\", *p1, *(p1 + 1),\
  \ p1[0], p1[1]);\n  ^\nexamples/05.Pointers/pointer1.c:11:3: warning: %d in format\
  \ string (no. 3) requires 'int' but the argument type is 'double'. [invalidPrintfArgType_sint]\n\
  \  printf(\"%d\\t%d\\t%d\\t%d\\n\", *p1, *(p1 + 1), p1[0], p1[1]);\n  ^\nexamples/05.Pointers/pointer1.c:11:3:\
  \ warning: %d in format string (no. 4) requires 'int' but the argument type is 'double'.\
  \ [invalidPrintfArgType_sint]\n  printf(\"%d\\t%d\\t%d\\t%d\\n\", *p1, *(p1 + 1),\
  \ p1[0], p1[1]);\n  ^\nexamples/05.Pointers/pointer1.c:14:3: portability: %d in\
  \ format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned\
  \ long}'. [invalidPrintfArgType_sint]\n  printf(\"%d, %p, %p\\n\", sizeof(*vp),\
  \ vp, vp + 1);\n  ^\nexamples/05.Pointers/pointer1.c:8:25: error: Expression '\"\
  %p\\t%p\\n\",p++,p' depends on order of evaluation of side effects [unknownEvaluationOrder]\n\
  \  printf(\"%p\\t%p\\n\", p++, p);\n                        ^\nexamples/05.Pointers/pointer1.c:14:26:\
  \ portability: '*vp' is of type 'void', the behaviour of 'sizeof(void)' is not covered\
  \ by the ISO C standard. [sizeofDereferencedVoidPointer]\n  printf(\"%d, %p, %p\\\
  n\", sizeof(*vp), vp, vp + 1);\n                         ^\nexamples/05.Pointers/pointer1.c:14:46:\
  \ portability: 'vp' is of type 'void *'. When using void pointers in calculations,\
  \ the behaviour is undefined. [arithOperationsOnVoidPointer]\n  printf(\"%d, %p,\
  \ %p\\n\", sizeof(*vp), vp, vp + 1);\n                                         \
  \    ^\nexamples/05.Pointers/pointer1.c:15:30: portability: 'vp' is of type 'void\
  \ *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]\n\
  \  printf(\"%d\\n\", *(int *)(vp + 1));\n                             ^\nexamples/05.Pointers/pointer1.c:6:22:\
  \ error: Uninitialized variable: &v [uninitvar]\n  printf(\"%p\\t%p\\n\", &v, a);\n\
  \                     ^\nexamples/06.Structs_Unions/floating_fields.c:43:3: warning:\
  \ %d in format string (no. 3) requires 'int' but the argument type is 'unsigned\
  \ int'. [invalidPrintfArgType_sint]\n  printf(\"S: %d\\t E: %03u (%03d) \", u.ff.sign,\
  \ u.ff.exponent, u.ff.exponent - 127);\n  ^\nexamples/06.Structs_Unions/struct1.c:21:3:\
  \ portability: %d in format string (no. 1) requires 'int' but the argument type\
  \ is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]\n  printf(\"%d\\\
  n\", sizeof(point2d));\n  ^\nexamples/06.Structs_Unions/struct2.c:23:3: portability:\
  \ %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka\
  \ unsigned long}'. [invalidPrintfArgType_sint]\n  printf(\"%d, %d\\n\", sizeof(point3d),\
  \ sizeof(point3d *));\n  ^\nexamples/06.Structs_Unions/struct2.c:23:3: portability:\
  \ %d in format string (no. 2) requires 'int' but the argument type is 'size_t {aka\
  \ unsigned long}'. [invalidPrintfArgType_sint]\n  printf(\"%d, %d\\n\", sizeof(point3d),\
  \ sizeof(point3d *));\n  ^\nexamples/06.Structs_Unions/struct3.c:23:3: portability:\
  \ %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka\
  \ unsigned long}'. [invalidPrintfArgType_sint]\n  printf(\"%d, %d\\n\", sizeof(point3d),\
  \ sizeof(point3d *));\n  ^\nexamples/06.Structs_Unions/struct3.c:23:3: portability:\
  \ %d in format string (no. 2) requires 'int' but the argument type is 'size_t {aka\
  \ unsigned long}'. [invalidPrintfArgType_sint]\n  printf(\"%d, %d\\n\", sizeof(point3d),\
  \ sizeof(point3d *));\n  ^\nexamples/06.Structs_Unions/variant.c:38:3: portability:\
  \ %lu in format string (no. 1) requires 'unsigned long' but the argument type is\
  \ 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]\n  printf(\"%lu, %lu\\\
  n\", sizeof(var_type), sizeof(number));\n  ^\nexamples/06.Structs_Unions/variant.c:38:3:\
  \ portability: %lu in format string (no. 2) requires 'unsigned long' but the argument\
  \ type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]\n  printf(\"\
  %lu, %lu\\n\", sizeof(var_type), sizeof(number));\n  ^\nexamples/13.Faster_Python_C/2.CFFI/pi_approx.c:10:12:\
  \ style: The scope of the variable 'x' can be reduced. [variableScope]\n  double\
  \ i,x,y,sum=0;\n           ^\nexamples/13.Faster_Python_C/2.CFFI/pi_approx.c:10:14:\
  \ style: The scope of the variable 'y' can be reduced. [variableScope]\n  double\
  \ i,x,y,sum=0;\n             ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe.c:16:5:\
  \ portability: %d in format string (no. 1) requires 'int' but the argument type\
  \ is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]\n    printf(\"%d,\
  \ %d, %d, %d\\n\", sizeof(int), sizeof(long), sizeof(float), sizeof(double));\n\
  \    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe.c:16:5: portability: %d in format\
  \ string (no. 2) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\
  \ [invalidPrintfArgType_sint]\n    printf(\"%d, %d, %d, %d\\n\", sizeof(int), sizeof(long),\
  \ sizeof(float), sizeof(double));\n    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe.c:16:5:\
  \ portability: %d in format string (no. 3) requires 'int' but the argument type\
  \ is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]\n    printf(\"%d,\
  \ %d, %d, %d\\n\", sizeof(int), sizeof(long), sizeof(float), sizeof(double));\n\
  \    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe.c:16:5: portability: %d in format\
  \ string (no. 4) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\
  \ [invalidPrintfArgType_sint]\n    printf(\"%d, %d, %d, %d\\n\", sizeof(int), sizeof(long),\
  \ sizeof(float), sizeof(double));\n    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe.c:10:42:\
  \ style: Variable 'i' is assigned a value that is never used. [unreadVariable]\n\
  \    for(int i = 1; i < 10; t *= x, f *= i++)\n                                \
  \         ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c:37:5: portability:\
  \ %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka\
  \ unsigned long}'. [invalidPrintfArgType_sint]\n    printf(\"%d, %d, %d, %d\\n\"\
  , sizeof(int), sizeof(long), sizeof(float), sizeof(double));\n    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c:37:5:\
  \ portability: %d in format string (no. 2) requires 'int' but the argument type\
  \ is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]\n    printf(\"%d,\
  \ %d, %d, %d\\n\", sizeof(int), sizeof(long), sizeof(float), sizeof(double));\n\
  \    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c:37:5: portability:\
  \ %d in format string (no. 3) requires 'int' but the argument type is 'size_t {aka\
  \ unsigned long}'. [invalidPrintfArgType_sint]\n    printf(\"%d, %d, %d, %d\\n\"\
  , sizeof(int), sizeof(long), sizeof(float), sizeof(double));\n    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c:37:5:\
  \ portability: %d in format string (no. 4) requires 'int' but the argument type\
  \ is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]\n    printf(\"%d,\
  \ %d, %d, %d\\n\", sizeof(int), sizeof(long), sizeof(float), sizeof(double));\n\
  \    ^\nexamples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c:31:42: style: Variable\
  \ 'i' is assigned a value that is never used. [unreadVariable]\n    for(int i =\
  \ 1; i < 10; t *= x, f *= i++)\n                                         ^\nnofile:0:0:\
  \ information: Cppcheck cannot find all the include files (use --check-config for\
  \ details) [missingInclude]\n\n"
cc_xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<results version=\"2\">\n   \
  \ <cppcheck version=\"2.10.3\"/>\n    <errors>\n        <error id=\"knownConditionTrueFalse\"\
  \ severity=\"style\" msg=\"Condition &apos;v1&apos; is always true\" verbose=\"\
  Condition &apos;v1&apos; is always true\" cwe=\"571\" file0=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  >\n            <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"15\" column=\"8\" info=\"Condition &apos;v1&apos; is always true\"/>\n\
  \            <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"5\" column=\"14\" info=\"Assignment &apos;v1=37&apos;, assigned value is\
  \ 37\"/>\n        </error>\n        <error id=\"knownConditionTrueFalse\" severity=\"\
  style\" msg=\"Condition &apos;v1&apos; is always true\" verbose=\"Condition &apos;v1&apos;\
  \ is always true\" cwe=\"571\" file0=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  >\n            <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"19\" column=\"8\" info=\"Condition &apos;v1&apos; is always true\"/>\n\
  \            <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"5\" column=\"14\" info=\"Assignment &apos;v1=37&apos;, assigned value is\
  \ 37\"/>\n        </error>\n        <error id=\"knownConditionTrueFalse\" severity=\"\
  style\" msg=\"Condition &apos;v2&apos; is always true\" verbose=\"Condition &apos;v2&apos;\
  \ is always true\" cwe=\"571\" file0=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  >\n            <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"19\" column=\"14\" info=\"Condition &apos;v2&apos; is always true\"/>\n\
  \            <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"5\" column=\"23\" info=\"Assignment &apos;v2=43&apos;, assigned value is\
  \ 43\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_uint\" severity=\"\
  warning\" msg=\"%u in format string (no. 1) requires &apos;unsigned int&apos; but\
  \ the argument type is &apos;signed int&apos;.\" verbose=\"%u in format string (no.\
  \ 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;.\"\
  \ cwe=\"686\" file0=\"examples/02.Types_Formatting_IO/integers_booleans.c\">\n \
  \           <location file=\"examples/02.Types_Formatting_IO/integers_booleans.c\"\
  \ line=\"13\" column=\"5\"/>\n        </error>\n        <error id=\"unreadVariable\"\
  \ severity=\"style\" msg=\"Variable &apos;x&apos; is assigned a value that is never\
  \ used.\" verbose=\"Variable &apos;x&apos; is assigned a value that is never used.\"\
  \ cwe=\"563\" file0=\"examples/03.Macros/macro2.c\">\n            <location file=\"\
  examples/03.Macros/macro2.c\" line=\"7\" column=\"9\"/>\n            <symbol>x</symbol>\n\
  \        </error>\n        <error id=\"invalidFunctionArgStr\" severity=\"error\"\
  \ msg=\"Invalid puts() argument nr 1. A nul-terminated string is required.\" verbose=\"\
  Invalid puts() argument nr 1. A nul-terminated string is required.\" cwe=\"628\"\
  \ file0=\"examples/04.Arrays_Strings/arrays1.5.c\">\n            <location file=\"\
  examples/04.Arrays_Strings/arrays1.5.c\" line=\"10\" column=\"8\"/>\n          \
  \  <symbol>puts</symbol>\n        </error>\n        <error id=\"invalidScanfArgType_int\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 1) requires &apos;int\
  \ *&apos; but the argument type is &apos;size_t * {aka unsigned long *}&apos;.\"\
  \ verbose=\"%d in format string (no. 1) requires &apos;int *&apos; but the argument\
  \ type is &apos;size_t * {aka unsigned long *}&apos;.\" cwe=\"686\" file0=\"examples/04.Arrays_Strings/arrays4.c\"\
  >\n            <location file=\"examples/04.Arrays_Strings/arrays4.c\" line=\"25\"\
  \ column=\"3\"/>\n        </error>\n        <error id=\"constParameter\" severity=\"\
  style\" msg=\"Parameter &apos;m&apos; can be declared as const array\" verbose=\"\
  Parameter &apos;m&apos; can be declared as const array\" cwe=\"398\" file0=\"examples/04.Arrays_Strings/arrays4.c\"\
  >\n            <location file=\"examples/04.Arrays_Strings/arrays4.c\" line=\"5\"\
  \ column=\"23\" info=\"Parameter &apos;m&apos; can be declared as const array\"\
  />\n            <symbol>m</symbol>\n        </error>\n        <error id=\"invalidscanf\"\
  \ severity=\"warning\" msg=\"scanf() without field width limits can crash with huge\
  \ input data.\" verbose=\"scanf() without field width limits can crash with huge\
  \ input data. Add a field width specifier to fix this problem.\\012\\012Sample program\
  \ that can crash:\\012\\012#include &lt;stdio.h&gt;\\012int main()\\012{\\012  \
  \  char c[5];\\012    scanf(&quot;%s&quot;, c);\\012    return 0;\\012}\\012\\012Typing\
  \ in 5 or more characters may make the program crash. The correct usage here is\
  \ &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include\
  \ the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source:\
  \ http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c\"\
  \ cwe=\"119\" file0=\"examples/04.Arrays_Strings/string_overflow.c\">\n        \
  \    <location file=\"examples/04.Arrays_Strings/string_overflow.c\" line=\"13\"\
  \ column=\"5\"/>\n        </error>\n        <error id=\"arrayIndexOutOfBounds\"\
  \ severity=\"error\" msg=\"Array &apos;a[1000]&apos; accessed at index 5000, which\
  \ is out of bounds.\" verbose=\"Array &apos;a[1000]&apos; accessed at index 5000,\
  \ which is out of bounds.\" cwe=\"788\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"7\" column=\"\
  42\" info=\"Array index out of bounds\"/>\n        </error>\n        <error id=\"\
  invalidPrintfArgType_sint\" severity=\"warning\" msg=\"%d in format string (no.\
  \ 1) requires &apos;int&apos; but the argument type is &apos;double&apos;.\" verbose=\"\
  %d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;double&apos;.\"\
  \ cwe=\"686\" file0=\"examples/05.Pointers/pointer1.c\">\n            <location\
  \ file=\"examples/05.Pointers/pointer1.c\" line=\"11\" column=\"3\"/>\n        </error>\n\
  \        <error id=\"invalidPrintfArgType_sint\" severity=\"warning\" msg=\"%d in\
  \ format string (no. 2) requires &apos;int&apos; but the argument type is &apos;double&apos;.\"\
  \ verbose=\"%d in format string (no. 2) requires &apos;int&apos; but the argument\
  \ type is &apos;double&apos;.\" cwe=\"686\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"11\" column=\"\
  3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\" severity=\"\
  warning\" msg=\"%d in format string (no. 3) requires &apos;int&apos; but the argument\
  \ type is &apos;double&apos;.\" verbose=\"%d in format string (no. 3) requires &apos;int&apos;\
  \ but the argument type is &apos;double&apos;.\" cwe=\"686\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"11\" column=\"\
  3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\" severity=\"\
  warning\" msg=\"%d in format string (no. 4) requires &apos;int&apos; but the argument\
  \ type is &apos;double&apos;.\" verbose=\"%d in format string (no. 4) requires &apos;int&apos;\
  \ but the argument type is &apos;double&apos;.\" cwe=\"686\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"11\" column=\"\
  3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\" severity=\"\
  portability\" msg=\"%d in format string (no. 1) requires &apos;int&apos; but the\
  \ argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"%d in format\
  \ string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"14\" column=\"\
  3\"/>\n        </error>\n        <error id=\"unknownEvaluationOrder\" severity=\"\
  error\" msg=\"Expression &apos;&quot;%p\\t%p\\n&quot;,p++,p&apos; depends on order\
  \ of evaluation of side effects\" verbose=\"Expression &apos;&quot;%p\\t%p\\n&quot;,p++,p&apos;\
  \ depends on order of evaluation of side effects\" cwe=\"768\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"8\" column=\"\
  25\"/>\n        </error>\n        <error id=\"sizeofDereferencedVoidPointer\" severity=\"\
  portability\" msg=\"&apos;*vp&apos; is of type &apos;void&apos;, the behaviour of\
  \ &apos;sizeof(void)&apos; is not covered by the ISO C standard.\" verbose=\"&apos;*vp&apos;\
  \ is of type &apos;void&apos;, the behaviour of &apos;sizeof(void)&apos; is not\
  \ covered by the ISO C standard. A value for &apos;sizeof(void)&apos; is defined\
  \ only as part of a GNU C extension, which defines &apos;sizeof(void)&apos; to be\
  \ 1.\" cwe=\"682\" file0=\"examples/05.Pointers/pointer1.c\">\n            <location\
  \ file=\"examples/05.Pointers/pointer1.c\" line=\"14\" column=\"26\"/>\n       \
  \ </error>\n        <error id=\"arithOperationsOnVoidPointer\" severity=\"portability\"\
  \ msg=\"&apos;vp&apos; is of type &apos;void *&apos;. When using void pointers in\
  \ calculations, the behaviour is undefined.\" verbose=\"&apos;vp&apos; is of type\
  \ &apos;void *&apos;. When using void pointers in calculations, the behaviour is\
  \ undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which\
  \ defines the &apos;sizeof(void)&apos; to be 1.\" cwe=\"467\" file0=\"examples/05.Pointers/pointer1.c\"\
  >\n            <location file=\"examples/05.Pointers/pointer1.c\" line=\"14\" column=\"\
  46\"/>\n            <symbol>vp</symbol>\n        </error>\n        <error id=\"\
  arithOperationsOnVoidPointer\" severity=\"portability\" msg=\"&apos;vp&apos; is\
  \ of type &apos;void *&apos;. When using void pointers in calculations, the behaviour\
  \ is undefined.\" verbose=\"&apos;vp&apos; is of type &apos;void *&apos;. When using\
  \ void pointers in calculations, the behaviour is undefined. Arithmetic operations\
  \ on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos;\
  \ to be 1.\" cwe=\"467\" file0=\"examples/05.Pointers/pointer1.c\">\n          \
  \  <location file=\"examples/05.Pointers/pointer1.c\" line=\"15\" column=\"30\"\
  />\n            <symbol>vp</symbol>\n        </error>\n        <error id=\"uninitvar\"\
  \ severity=\"error\" msg=\"Uninitialized variable: &amp;v\" verbose=\"Uninitialized\
  \ variable: &amp;v\" cwe=\"457\" file0=\"examples/05.Pointers/pointer1.c\">\n  \
  \          <location file=\"examples/05.Pointers/pointer1.c\" line=\"6\" column=\"\
  22\"/>\n            <symbol>&amp;v</symbol>\n        </error>\n        <error id=\"\
  invalidPrintfArgType_sint\" severity=\"warning\" msg=\"%d in format string (no.\
  \ 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.\"\
  \ verbose=\"%d in format string (no. 3) requires &apos;int&apos; but the argument\
  \ type is &apos;unsigned int&apos;.\" cwe=\"686\" file0=\"examples/06.Structs_Unions/floating_fields.c\"\
  >\n            <location file=\"examples/06.Structs_Unions/floating_fields.c\" line=\"\
  43\" column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 1) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/06.Structs_Unions/struct1.c\"\
  >\n            <location file=\"examples/06.Structs_Unions/struct1.c\" line=\"21\"\
  \ column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 1) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/06.Structs_Unions/struct2.c\"\
  >\n            <location file=\"examples/06.Structs_Unions/struct2.c\" line=\"23\"\
  \ column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 2) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/06.Structs_Unions/struct2.c\"\
  >\n            <location file=\"examples/06.Structs_Unions/struct2.c\" line=\"23\"\
  \ column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 1) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/06.Structs_Unions/struct3.c\"\
  >\n            <location file=\"examples/06.Structs_Unions/struct3.c\" line=\"23\"\
  \ column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 2) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/06.Structs_Unions/struct3.c\"\
  >\n            <location file=\"examples/06.Structs_Unions/struct3.c\" line=\"23\"\
  \ column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_uint\"\
  \ severity=\"portability\" msg=\"%lu in format string (no. 1) requires &apos;unsigned\
  \ long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.\"\
  \ verbose=\"%lu in format string (no. 1) requires &apos;unsigned long&apos; but\
  \ the argument type is &apos;size_t {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"\
  examples/06.Structs_Unions/variant.c\">\n            <location file=\"examples/06.Structs_Unions/variant.c\"\
  \ line=\"38\" column=\"3\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_uint\"\
  \ severity=\"portability\" msg=\"%lu in format string (no. 2) requires &apos;unsigned\
  \ long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.\"\
  \ verbose=\"%lu in format string (no. 2) requires &apos;unsigned long&apos; but\
  \ the argument type is &apos;size_t {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"\
  examples/06.Structs_Unions/variant.c\">\n            <location file=\"examples/06.Structs_Unions/variant.c\"\
  \ line=\"38\" column=\"3\"/>\n        </error>\n        <error id=\"variableScope\"\
  \ severity=\"style\" msg=\"The scope of the variable &apos;x&apos; can be reduced.\"\
  \ verbose=\"The scope of the variable &apos;x&apos; can be reduced. Warning: Be\
  \ careful when fixing this message, especially when there are inner loops. Here\
  \ is an example where cppcheck will write that the scope for &apos;i&apos; can be\
  \ reduced:\\012void f(int x)\\012{\\012    int i = 0;\\012    if (x) {\\012    \
  \    // it&apos;s safe to move &apos;int i = 0;&apos; here\\012        for (int\
  \ n = 0; n &lt; 10; ++n) {\\012            // it is possible but not safe to move\
  \ &apos;int i = 0;&apos; here\\012            do_something(&amp;i);\\012       \
  \ }\\012    }\\012}\\012When you see this message it is always safe to reduce the\
  \ variable scope 1 level.\" cwe=\"398\" file0=\"examples/13.Faster_Python_C/2.CFFI/pi_approx.c\"\
  >\n            <location file=\"examples/13.Faster_Python_C/2.CFFI/pi_approx.c\"\
  \ line=\"10\" column=\"12\"/>\n            <symbol>x</symbol>\n        </error>\n\
  \        <error id=\"variableScope\" severity=\"style\" msg=\"The scope of the variable\
  \ &apos;y&apos; can be reduced.\" verbose=\"The scope of the variable &apos;y&apos;\
  \ can be reduced. Warning: Be careful when fixing this message, especially when\
  \ there are inner loops. Here is an example where cppcheck will write that the scope\
  \ for &apos;i&apos; can be reduced:\\012void f(int x)\\012{\\012    int i = 0;\\\
  012    if (x) {\\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\\\
  012        for (int n = 0; n &lt; 10; ++n) {\\012            // it is possible but\
  \ not safe to move &apos;int i = 0;&apos; here\\012            do_something(&amp;i);\\\
  012        }\\012    }\\012}\\012When you see this message it is always safe to\
  \ reduce the variable scope 1 level.\" cwe=\"398\" file0=\"examples/13.Faster_Python_C/2.CFFI/pi_approx.c\"\
  >\n            <location file=\"examples/13.Faster_Python_C/2.CFFI/pi_approx.c\"\
  \ line=\"10\" column=\"14\"/>\n            <symbol>y</symbol>\n        </error>\n\
  \        <error id=\"invalidPrintfArgType_sint\" severity=\"portability\" msg=\"\
  %d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" verbose=\"%d in format string (no. 1) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" cwe=\"686\"\
  \ file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\">\n            <location\
  \ file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\" line=\"16\" column=\"5\"\
  />\n        </error>\n        <error id=\"invalidPrintfArgType_sint\" severity=\"\
  portability\" msg=\"%d in format string (no. 2) requires &apos;int&apos; but the\
  \ argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"%d in format\
  \ string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\"\
  \ line=\"16\" column=\"5\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 3) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\"\
  \ line=\"16\" column=\"5\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 4) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 4) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\"\
  \ line=\"16\" column=\"5\"/>\n        </error>\n        <error id=\"unreadVariable\"\
  \ severity=\"style\" msg=\"Variable &apos;i&apos; is assigned a value that is never\
  \ used.\" verbose=\"Variable &apos;i&apos; is assigned a value that is never used.\"\
  \ cwe=\"563\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\">\n       \
  \     <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe.c\" line=\"10\"\
  \ column=\"42\"/>\n            <symbol>i</symbol>\n        </error>\n        <error\
  \ id=\"invalidPrintfArgType_sint\" severity=\"portability\" msg=\"%d in format string\
  \ (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned\
  \ long}&apos;.\" verbose=\"%d in format string (no. 1) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" cwe=\"686\"\
  \ file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\">\n         \
  \   <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\" line=\"\
  37\" column=\"5\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 2) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  \ line=\"37\" column=\"5\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 3) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  \ line=\"37\" column=\"5\"/>\n        </error>\n        <error id=\"invalidPrintfArgType_sint\"\
  \ severity=\"portability\" msg=\"%d in format string (no. 4) requires &apos;int&apos;\
  \ but the argument type is &apos;size_t {aka unsigned long}&apos;.\" verbose=\"\
  %d in format string (no. 4) requires &apos;int&apos; but the argument type is &apos;size_t\
  \ {aka unsigned long}&apos;.\" cwe=\"686\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  \ line=\"37\" column=\"5\"/>\n        </error>\n        <error id=\"unreadVariable\"\
  \ severity=\"style\" msg=\"Variable &apos;i&apos; is assigned a value that is never\
  \ used.\" verbose=\"Variable &apos;i&apos; is assigned a value that is never used.\"\
  \ cwe=\"563\" file0=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  >\n            <location file=\"examples/14.Cross_Compiling/ZX_Spectrum/hwe_no_printf.c\"\
  \ line=\"31\" column=\"42\"/>\n            <symbol>i</symbol>\n        </error>\n\
  \        <error id=\"missingInclude\" severity=\"information\" msg=\"Cppcheck cannot\
  \ find all the include files (use --check-config for details)\" verbose=\"Cppcheck\
  \ cannot find all the include files. Cppcheck can check the code without the include\
  \ files found. But the results will probably be more accurate if all the include\
  \ files are found. Please check your project&apos;s include directories and add\
  \ all of them as include directories for Cppcheck. To see what files Cppcheck cannot\
  \ find use --check-config.\"/>\n    </errors>\n</results>\n"
tot_score: -6.984420642648491
